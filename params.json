{"name":"Fb with Modular Structured Data Literals","tagline":"Extension of Fb with support for modular structured data literals (like XML, JSON, YAML etc.)","body":"### Overview\r\nModular Structured Data Literals extend [Fb](http://ahmadsalim.github.com/fflat/) with the ability to support literals of various kinds of structured data, such as XML, JSON and YAML.\r\nThis extension allows integration of new literal parsers, and supports both construction of and pattern matching on literal expressions.\r\n\r\n#### Example\r\n\r\n```ocaml\r\nlet a = [XContent(%q{Fantasy})]\r\nin\r\n  let thedata =\r\n    %xml{\r\n      <book id=\"bk105\">\r\n        <author>Corets, Eva</author>\r\n        <title>The Sundered Grail</title>\r\n        <genre>[a]</genre>\r\n        <price>5.95</price>\r\n        <publish_date>2001-09-10</publish_date>\r\n        <description>\r\n          The two daughters of Maeve, half-sisters,\r\n          battle one another for control of England. \r\n          Sequel to Oberon's Legacy\r\n        </description>\r\n      </book>\r\n    }\r\n  in\r\n    match thedata with\r\n    | %xml{\r\n        <book [id]='[idVal]' [attrs]>\r\n          <author>[authorVal]</>\r\n          <title>[titleVal]</>\r\n          [restVal]\r\n        </>\r\n      }   ->\r\n             let jsonId = \r\n               JsString(idVal)\r\n             and jsonAuthor = \r\n               JsString(match authorVal with \r\n                        | [XContent(author)] -> author)\r\n             and jsonTitle = \r\n               JsString(match titleVal with \r\n                        | [XContent(title)] -> title)\r\n             in\r\n               Right %json(\r\n               { \r\n                 \"id\": <jsonId>,\r\n                 \"author\": <jsonAuthor>,\r\n                 \"title\": <jsonTitle> \r\n               })\r\n             end\r\n      | _ -> Left \"Failed\"\r\n    end\r\nend\r\n```\r\n\r\n### Running the interpreter\r\nTo interpret Fb programs with Modular Structured Data Literals, create a new interpreter instance in an F# script and use either ParseProgramFromString (using the program as a string) or ParseProgramFromFile (using the filename containing the program).\r\n\r\n### Registering new data literal parser\r\nTo use a literal parser implement the IStructuredDataLiteralParser interface and use the interpreter's RegisterLiteralParser method.\r\n\r\n### Authors and Contributors\r\nThe main author behind this project is Ahmad Salim AlSibahi (@ahmadsalim).\r\nThe language and compiler is based on Peter Sestoft(@sestoft)'s ÂµML langauge.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}